{"version":3,"sources":["components/Header.js","components/Footer.js","components/Sidebar.js","ContextProvider.js","components/ContactListItem.js","components/ContactsList.js","components/SpeedTyping.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","className","Footer","Sidebar","Context","React","createContext","ContextProvider","children","console","log","useState","contactList","setContactList","firstName","lastName","inputName","setInputName","firstNameWarning","setFirstNameWarning","lastNameWarning","setLastNameWarning","isButtonDisabled","setIsButtonDisabled","isContactDuplicate","setIsContactDuplicate","useEffect","Provider","value","updateInputName","event","target","name","prevInputName","checkContactListForDuplicates","preventDefault","inputConcat","concat","some","element","elementConcat","prevContactList","ContactListItem","item","ContactsList","useContext","contactListDisplay","map","key","duplicateMessage","onSubmit","htmlFor","autoComplete","onChange","placeholder","type","id","disabled","SpeedTyping","time","setTime","textInput","setTextInput","wordCount","setWordCount","isGameRunning","setIsGameRunning","startButton","useRef","inputArea","endGame","trim","split","filter","length","current","focus","setNextGameLength","setTimeout","prevTime","ref","onClick","style","display","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","testValue","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b426c68a.chunk.js","sourcesContent":["import React from \"react\" \r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Header() {\r\n\r\n    return(\r\n        <header>\r\n            <h1>Pete's Mediocre React Portfolio</h1>\r\n            <Link to=\"/\"><p className=\"header-link\">Speed Typing Test</p></Link>\r\n            <Link to=\"/contacts-list\"><p className=\"header-link\" >Contacts List</p></Link>\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nfunction Footer() {\r\n\r\n    return(<footer>\r\n\r\n    </footer>)\r\n\r\n}\r\n\r\n\r\nexport default Footer","import React from \"react\"\r\n\r\nfunction Sidebar() {\r\n    return(<div className=\"sidebar\">\r\n        \r\n    </div>)\r\n}\r\n\r\nexport default Sidebar","import React, {useState, useEffect} from \"react\"\r\nconst Context = React.createContext()\r\n\r\nfunction ContextProvider({children}) {\r\n\r\n    console.log(\"ContextProvider1\")\r\n    \r\n    const [contactList, setContactList] = useState([])\r\n    const [inputName, setInputName] = useState({firstName : \"\", lastName : \"\"})\r\n    const [firstNameWarning, setFirstNameWarning] = useState(\"\")\r\n    const [lastNameWarning, setLastNameWarning] = useState(\"\")\r\n    const [isButtonDisabled, setIsButtonDisabled] = useState(true)\r\n    const [isContactDuplicate, setIsContactDuplicate] = useState(false)\r\n    \r\n    // validateNamesNotBlank()\r\n    // Having validation of input fields not blank would work if \r\n\r\n    function updateInputName(event) {\r\n\r\n        console.log(\"in updateInputName\")\r\n\r\n        const {name, value} = event.target\r\n        // console.log(name)\r\n        // console.log(value)\r\n\r\n        setInputName(prevInputName => {\r\n            return {...prevInputName, [name] : value}\r\n        })\r\n\r\n        //console.log(\"in updateInputName\" + JSON.stringify(inputName))\r\n\r\n        //PETE - NOTE THAT VALIDATION OF inputName WILL FAIL IF YOU DO IT HERE!\r\n        //inputName is \"one input behind\" \r\n        //THE FIRST POINT AT WHICH inputName HAS BEEN SET IS WHEN WE GET BACK TO\r\n        //ContactsList COMPONENT \r\n        //validateNamesNotBlank()\r\n    }\r\n\r\n    function checkContactListForDuplicates(event) {\r\n\r\n        console.log(\"checkContactListForDuplicates\")\r\n\r\n        event.preventDefault()\r\n\r\n        const inputConcat = inputName.firstName.concat(inputName.lastName)\r\n\r\n        const checkArrayForDuplicate = contactList.some(element => {\r\n            const elementConcat = element.firstName.concat(element.lastName)\r\n            return inputConcat === elementConcat\r\n        })\r\n\r\n        if(checkArrayForDuplicate) {\r\n            setIsContactDuplicate(true)\r\n        } else {\r\n            setIsContactDuplicate(false)\r\n            updateContactList()\r\n        }\r\n\r\n    }\r\n    \r\n    function updateContactList() {\r\n        //event.preventDefault()\r\n        setContactList(prevContactList => {\r\n            return ([...prevContactList, inputName])\r\n        })\r\n\r\n        setInputName({firstName : \"\", lastName : \"\"})\r\n    }\r\n\r\n    function validateNamesNotBlank() {\r\n\r\n        if(inputName.firstName === \"\") {\r\n            setFirstNameWarning(\"First name cannot be blank\")\r\n            console.log(firstNameWarning)\r\n        } else {\r\n            setFirstNameWarning(\"\")\r\n        }\r\n\r\n        if(inputName.lastName === \"\") {\r\n            setLastNameWarning(\"Last name cannot be blank\")\r\n        } else {\r\n            setLastNameWarning(\"\")\r\n        }\r\n\r\n        if(inputName.firstName !== \"\" && inputName.lastName !== \"\" ) {\r\n            setIsButtonDisabled(false)  \r\n        } else {\r\n            setIsButtonDisabled(true) \r\n        }\r\n\r\n    }\r\n\r\n    useEffect(function() {\r\n\r\n        validateNamesNotBlank()} \r\n    ,[inputName])\r\n\r\n    return(\r\n        <Context.Provider value={{contactList, \r\n                                inputName, \r\n                                updateInputName, \r\n                                checkContactListForDuplicates,\r\n                                isButtonDisabled,\r\n                                firstNameWarning,\r\n                                lastNameWarning,\r\n                                isContactDuplicate}}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport {Context, ContextProvider}\r\n\r\n// 4) Moving on to the handleSubmit method:\r\n\r\n//     function handleSubmit(event) {\r\n//         event.preventDefault()\r\n//         setContactsData(prevContacts => [...prevContacts, inputData])\r\n//     }\r\n\r\n//  4) i) You need event.preventDefault in the handleSubmit method. You haven't used event.preventDefault() \r\n// for a while, but event.preventDefault() was required here because in this case the button click submits a form,\r\n// and a form submit has a default action associated with it (baked into the browser) that we wanted to supress. \r\n// In the case of form submissions the default browser behaviour is a re-render of the entire page.\r\n\r\n// Here is a list of default actions associated with specific events \r\n// https://javascript.info/default-browser-action. You will see that there is no default action associated\r\n// with a button click, this is why you're unfamiliar with preventDefault(), but there is a default action \r\n// associated with form submits (note : if your button is in within a form, then it will be automatically \r\n// treated as a form submit by the browser, so even if you moved the \"handleSubmit()\" function to be triggered\r\n// onClick of the button in this case, you would STILL need the \"event.preventDefault()\").\r\n\r\n// If you neglect to include the \"event.preventDefault()\" then you don't get an error message. Instead\r\n// what you see when you click the \"Add contact\" button is the expected result for a fraction of a second, \r\n// which then disappears and the entire form is reset (submission and page reset)  ","import React from \"react\"\r\n\r\nfunction ContactListItem({item}) {\r\n\r\n    return(\r\n        <p>{item.firstName} {item.lastName}</p>\r\n    )\r\n}\r\n\r\nexport default ContactListItem","import React, {useContext} from \"react\"\r\nimport {Context} from \"../ContextProvider\"\r\nimport ContactListItem from \"./ContactListItem\"\r\n\r\nfunction ContactsList() {\r\n\r\n    console.log(\"in ContactsList\")\r\n\r\n    const {contactList, \r\n            inputName, \r\n            updateInputName, \r\n            checkContactListForDuplicates,\r\n            isButtonDisabled,\r\n            firstNameWarning,\r\n            lastNameWarning,\r\n            isContactDuplicate} = useContext(Context)\r\n\r\n    //PETE - WHY DOES THIS VALIDATION NEED TO BE HERE IN ContactsList?\r\n    //WHY DOESN'T IT WORK WHEN PLACED IN \"ContextProvider\" ?\r\n    //validateNamesNotBlank()\r\n\r\n    const contactListDisplay = contactList.map(element => {\r\n        return <ContactListItem \r\n        key={element.firstName.concat(element.lastName)} \r\n        item={element} />\r\n    })\r\n\r\n    const duplicateMessage = isContactDuplicate && \"This contact is already in your list\"\r\n\r\n    return(\r\n        <main className=\"contacts-list-main\">\r\n            <div className =\"contacts-add-area\">\r\n            <p>Name to be added to contacts list : </p>\r\n                <form onSubmit={checkContactListForDuplicates}>\r\n                <div className = \"contacts-input-block\">\r\n                <label htmlFor=\"firstName\">First name : </label>\r\n                <input \r\n                    autoComplete=\"off\" \r\n                    onChange={updateInputName} \r\n                    placeholder=\"First name\" \r\n                    type=\"text\" \r\n                    id=\"firstName\"\r\n                    name=\"firstName\"\r\n                    value={inputName.firstName}>\r\n                </input>\r\n                <span className=\"contacts-input-warning\">{firstNameWarning}</span>\r\n                </div>\r\n                <div className = \"contacts-input-block\">\r\n                <label htmlFor=\"lastName\">Last name : </label>\r\n                <input \r\n                    autoComplete=\"off\" \r\n                    onChange={updateInputName} \r\n                    placeholder=\"Last name\" \r\n                    type=\"text\" \r\n                    id=\"lastName\"\r\n                    name=\"lastName\"\r\n                    value={inputName.lastName}>\r\n                </input>\r\n                <span className=\"contacts-input-warning\">{lastNameWarning}</span>\r\n                </div>\r\n                <button disabled={isButtonDisabled} >Add to contact list</button>\r\n                <p>{duplicateMessage}</p>\r\n                </form>\r\n            </div>\r\n            <div className=\"contacts-list-notepad\">\r\n                <h1>List of contacts</h1>\r\n                {contactListDisplay}\r\n            </div>\r\n\r\n        </main>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ContactsList","import React, {useState, useEffect, useRef} from \"react\"\r\n\r\nfunction SpeedTyping() {\r\n\r\n    const [time, setTime] = useState(15)\r\n    const [textInput, setTextInput] = useState(\"\")\r\n    const [wordCount, setWordCount] = useState(0)\r\n    const [isGameRunning, setIsGameRunning] = useState(false)\r\n    const startButton = useRef(null)\r\n    const inputArea = useRef(null)\r\n\r\n\r\n    function handleChange(event) {\r\n        const {value} = event.target\r\n        setTextInput(value)\r\n    }\r\n\r\n\r\n    function calcWordCount() {\r\n        setWordCount(textInput.trim().split(\" \").filter(element => element !== \"\").length)\r\n    }\r\n\r\n    function startGame() {\r\n        if(time <= 0) {\r\n            setTime(15)\r\n            setTextInput(\"\")\r\n            setWordCount(0)\r\n            setIsGameRunning(true)\r\n            inputArea.current.disabled = false\r\n            inputArea.current.focus()\r\n        } else {\r\n        setIsGameRunning(true)\r\n        inputArea.current.disabled = false\r\n        inputArea.current.focus()\r\n\r\n        }\r\n    }\r\n\r\n    function endGame() {\r\n        calcWordCount()\r\n        setIsGameRunning(false)\r\n        startButton.current.focus()\r\n    }\r\n\r\n    function setNextGameLength(event) {\r\n        const {value} = event.target\r\n        setTime(value)\r\n    }\r\n    useEffect(() => \r\n              {\r\n                if(time > 0 && isGameRunning) {\r\n                    setTimeout(() => {setTime(prevTime => prevTime -1)} ,1000)}\r\n                else if (time <= 0) {\r\n                    endGame()\r\n                }\r\n              }\r\n        ,[time, isGameRunning])\r\n\r\n\r\n    return(\r\n        <main className=\"speed-typing-main\">\r\n            <h1>What is your typing speed?</h1>\r\n            <textarea disabled={!isGameRunning} ref={inputArea} onChange={handleChange} value={textInput}></textarea>\r\n            <h2>Number of seconds left : {time} </h2>\r\n            <button disabled={isGameRunning} ref={startButton} onClick={startGame}>Start</button>\r\n            <div style={{display : isGameRunning ? \"none\" : \"block\"}} className=\"bottom-area\">\r\n            <h2 >Your word count was : {wordCount} </h2>\r\n            <h3>How long do you want the next game to be ? </h3>\r\n                <button disabled={isGameRunning} onClick={setNextGameLength} value={15} >15 secs</button>\r\n                <button disabled={isGameRunning} onClick={setNextGameLength} value={30}>30 secs</button>\r\n                <button disabled={isGameRunning} onClick={setNextGameLength} value={45}>45 secs</button>\r\n                <button disabled={isGameRunning} onClick={setNextGameLength} value={60}>60 secs</button>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default SpeedTyping","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport Sidebar from \"./components/Sidebar\"\nimport ContactsList from \"./components/ContactsList\"\nimport SpeedTyping from \"./components/SpeedTyping\"\nimport {Route, Switch} from \"react-router-dom\"\n\nfunction App() {\n\n  console.log(\"App\")\n\n\n  return (\n    <>\n    <Header />\n    <Sidebar />\n    <Switch >\n      <Route exact path =\"/\" ><SpeedTyping /></Route>\n      <Route path =\"/contacts-list\"><ContactsList /></Route>\n    </Switch>\n    <Footer />\n\n    </>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\"\nimport {ContextProvider} from \"./ContextProvider\"\n\nReactDOM.render(\n  <ContextProvider value={{testValue : \"testvalue\"}} >\n    <Router>\n      <App />\n    </Router>\n  </ContextProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}